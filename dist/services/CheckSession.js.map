{"version":3,"sources":["../../src/services/CheckSession.js"],"names":["session","res","ClientSession","findOne","infos","status","json","message","CheckSession","webhook","SessionInfos","Session","create","clientID","serverToken","clientToken","encKey","macKey","user","SaveSession","delete_id","findByIdAndRemove","_id","SessionDelete"],"mappings":";;;;;;;;;;;;;;;;wFACO,iBAA4BA,OAA5B,EAAqCC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEmBC,wBAAcC,OAAd,CAAsB,EAAEH,gBAAF,EAAtB,CAFnB;;AAAA;AAEKI,6BAFL;AAAA,yDAGQA,KAHR;;AAAA;AAAA;AAAA;AAAA,yDAKQH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,KAAV,EAAiBE,SAAS,mBAA1B,EAArB,CALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;;yFAQf,kBAA2BR,OAA3B,EAAoCS,OAApC,EAA6CC,YAA7C,EAA2DT,GAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AACCU,+BADD,GACW,IADX;AAAA;AAAA;AAAA,+BAGiBT,wBAAcC,OAAd,CAAsB,EAAEH,gBAAF,EAAtB,CAHjB;;AAAA;AAGCW,+BAHD;;AAAA,6BAIKA,OAJL;AAAA;AAAA;AAAA;;AAAA,0DAIqB,wBAJrB;;AAAA;AAAA;AAAA,+BAKoBT,wBAAcU,MAAd,CAAqB;AACpCZ,qCAASA,OAD2B;AAEpCS,qCAASA,OAF2B;AAGpCI,sCAAUH,aAAaG,QAHa;AAIpCC,yCAAaJ,aAAaI,WAJU;AAKpCC,yCAAaL,aAAaK,WALU;AAMpCC,oCAAQN,aAAaM,MANe;AAOpCC,oCAAQP,aAAaO;AAPe,yBAArB,CALpB;;AAAA;AAKOC,4BALP;AAAA,0DAcQ,IAdR;;AAAA;AAAA;AAAA;AAAA,0DAgBQjB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,KAAV,EAAiBE,SAAS,iBAA1B,EAArB,CAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeY,W;;;;;;yFAmBf,kBAA6BnB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKoB,iCAFL,GAEiB,IAFjB;AAAA;AAAA,+BAGmBlB,wBAAcC,OAAd,CAAsB,EAAEH,gBAAF,EAAtB,CAHnB;;AAAA;AAGCoB,iCAHD;AAAA;AAAA,+BAIOlB,wBAAcmB,iBAAd,CAAgCD,UAAUE,GAA1C,CAJP;;AAAA;AAAA,0DAKQ,IALR;;AAAA;AAAA;AAAA;AAAA,0DAOQ,KAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,a;;;;;AA5BtB","file":"CheckSession.js","sourcesContent":["import { ClientSession } from '../models/sessions'\r\nexport async function CheckSession(session, res) {\r\n    try {\r\n        let infos = await ClientSession.findOne({ session })\r\n        return infos\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Session not found' })\r\n    }\r\n}\r\nexport async function SaveSession(session, webhook, SessionInfos, res) {\r\n    let Session = null\r\n    try {\r\n        Session = await ClientSession.findOne({ session })\r\n        if (Session) return 'Session already exists'\r\n        const user = await ClientSession.create({\r\n            session: session,\r\n            webhook: webhook,\r\n            clientID: SessionInfos.clientID,\r\n            serverToken: SessionInfos.serverToken,\r\n            clientToken: SessionInfos.clientToken,\r\n            encKey: SessionInfos.encKey,\r\n            macKey: SessionInfos.macKey,\r\n        })\r\n        return true\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Register failed' })\r\n    }\r\n}\r\nexport async function SessionDelete(session) {\r\n    try {\r\n        let delete_id = null\r\n        delete_id = await ClientSession.findOne({ session })\r\n        await ClientSession.findByIdAndRemove(delete_id._id)\r\n        return true\r\n    } catch (err) {\r\n        return false\r\n    }\r\n}\r\n"]}