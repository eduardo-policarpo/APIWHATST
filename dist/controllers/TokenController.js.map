{"version":3,"sources":["../../src/controllers/TokenController.js"],"names":["req","res","session","query","body","webhook","clientID","serverToken","clientToken","encKey","macKey","Session","ClientSession","findOne","status","json","message","create","user","NewSession","infos","FindSession","find","list","SessionList","updateID","findByIdAndUpdate","_id","SessionUpdate","delete_id","findByIdAndRemove","SessionDelete"],"mappings":"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","file":"TokenController.js","sourcesContent":["import { ClientSession } from '../models/sessions'\r\nexport async function NewSession(req, res) {\r\n    const { session } = req.query\r\n    const { webhook, clientID, serverToken, clientToken, encKey, macKey } = req.body\r\n    let Session = null\r\n    try {\r\n        Session = await ClientSession.findOne({ session })\r\n        if (Session) return res.status(400).json({ status: false, message: 'Session already exists' })\r\n        const user = await ClientSession.create({ session, webhook, clientID, serverToken, clientToken, encKey, macKey })\r\n        return res.status(200).json(user)\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Register failed' })\r\n    }\r\n}\r\nexport async function FindSession(req, res) {\r\n    const { session } = req.query\r\n    let infos = null\r\n    try {\r\n        infos = await ClientSession.findOne({ session })\r\n        return res.status(200).json(infos)\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Session not found' })\r\n    }\r\n}\r\n\r\nexport async function SessionList(req, res) {\r\n    try {\r\n        const list = await ClientSession.find()\r\n        return res.status(200).json(list)\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\nexport async function SessionUpdate(req, res) {\r\n    const { session } = req.query\r\n    const { webhook } = req.body\r\n    let updateID = null\r\n    try {\r\n        updateID = await ClientSession.findOne({ session })\r\n        await ClientSession.findByIdAndUpdate(updateID._id, {\r\n            webhook,\r\n        })\r\n        return res.status(200).json({ status: true, message: 'Session update' })\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\nexport async function SessionDelete(req, res) {\r\n    const { session } = req.query\r\n    try {\r\n        let delete_id = null\r\n        delete_id = await ClientSession.findOne({ session })\r\n        await ClientSession.findByIdAndRemove(delete_id._id)\r\n        return res.status(200).json({ status: true, message: 'Session Deleted' })\r\n    } catch (err) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n"]}