{"version":3,"sources":["../../src/controllers/QrCodeController.js"],"names":["req","res","session","query","QRCodeArr","status","json","qrcode","qr","message","GetQrCode"],"mappings":";;;;;;;;;;;;;;;AACA;;wFACO,iBAAyBA,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,+BADL,GACiBF,IAAIG,KADrB,CACKD,OADL;;AAAA,6BAECE,uBAAUF,OAAV,CAFD;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGOD,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,IAAV,EAAgBE,QAAQH,uBAAUF,OAAV,EAAmBM,EAA3C,EAArB,CAHP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAKOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,KAAV,EAAiBI,SAAS,mBAA1B,EAArB,CALP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,S;;;;;AAFtB","file":"QrCodeController.js","sourcesContent":["import { QRCodeArr } from \"../util/SessionUtil\";\r\n//Iniciar nova sess√£o\r\nexport async function GetQrCode(req, res) {\r\n    const { session } = req.query;\r\n    if (QRCodeArr[session]) {\r\n        await res.status(200).json({ status: true, qrcode: QRCodeArr[session].qr })\r\n    } else {\r\n        await res.status(401).json({ status: false, message: \"session not found\" })\r\n    }\r\n}"]}