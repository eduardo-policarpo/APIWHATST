{"version":3,"sources":["../../src/controllers/GroupController.js"],"names":["req","res","session","query","chatArray","APISession","loadChats","Chats","allChats","chats","i","length","count","id","newDate","moment","unix","t","format","messagesBody","messages","LastMessage","JSON","parse","LengthMessages","MessagePresence","Name","phonePP","jid","replace","name","message","conversation","PPIMAGE","getProfilePicture","includes","chatId","time","phone","title","image","lastchat","status","json","console","log","GetGroups","body","chatarry","groupMetadata","participants","x","newvalues","filter","v","a","findIndex","GetGroupMembers"],"mappings":"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","file":"GroupController.js","sourcesContent":["import moment from 'moment'\r\nimport { APISession } from '../util/SessionUtil'\r\nimport { WAGroupParticipant } from '@adiwajshing/baileys'\r\nexport async function GetGroups(req, res) {\r\n    const { session } = req.query\r\n    let chatArray = []\r\n    try {\r\n        const Chats = await APISession[session].loadChats()\r\n        let allChats = Chats.chats\r\n        for (let i = 0; i < allChats.length; i++) {\r\n            let count = 1\r\n            let id = count + i\r\n            let newDate = moment.unix(allChats[i].t).format('DD/MM/YYYY HH:MM:ss')\r\n            let messagesBody = allChats[i].messages\r\n            let LastMessage = JSON.parse(JSON.stringify(messagesBody))\r\n            let LengthMessages = LastMessage.length - 1\r\n            let MessagePresence = null\r\n            let Name = null\r\n            let phonePP = allChats[i].jid.replace('@s.whatsapp.net', '')\r\n            if (allChats[i].name) Name = allChats[i].name\r\n            else Name = allChats[i].jid.replace('@s.whatsapp.net', '')\r\n\r\n            if (LastMessage[LengthMessages].message) MessagePresence = LastMessage[LengthMessages].message.conversation\r\n            else MessagePresence = 'Não foi possível carregar as mensagens anteriores'\r\n            let PPIMAGE = null\r\n            try {\r\n                PPIMAGE = await APISession[session].getProfilePicture(`${phonePP}@c.us`)\r\n            } catch (e) {\r\n                PPIMAGE = 'https://upload.wikimedia.org/wikipedia/en/e/ee/Unknown-person.gif'\r\n            }\r\n            if (allChats[i].jid.includes('@g.us')) {\r\n                chatArray = [\r\n                    ...chatArray,\r\n                    {\r\n                        chatId: id,\r\n                        time: newDate,\r\n                        phone: allChats[i].jid.replace('@s.whatsapp.net', ''),\r\n                        title: Name,\r\n                        image: PPIMAGE,\r\n                        lastchat: MessagePresence,\r\n                    },\r\n                ]\r\n            }\r\n        }\r\n        return res.status(200).json(chatArray)\r\n    } catch (e) {\r\n        console.log(e)\r\n        return res.status(400).json({ message: 'Session closed' })\r\n    }\r\n}\r\nexport async function GetGroupMembers(req, res) {\r\n    const { session } = req.query\r\n    const { chats } = req.body\r\n    let chatarry = []\r\n    for (let i = 0; i < chats.length; i++) {\r\n        console.log(chats[i])\r\n        let participants = (await APISession[session].groupMetadata(chats[i])).participants\r\n        for (let x = 0; x < participants.length; x++) {\r\n            let phone = participants[x].jid\r\n            chatarry = [...chatarry, { phone: phone.replace('@s.whatsapp.net', '') }]\r\n        }\r\n    }\r\n    let newvalues = chatarry.filter((v, i, a) => a.findIndex(t => t.id === v.id) === i)\r\n    return res.status(200).json(newvalues)\r\n}\r\n"]}