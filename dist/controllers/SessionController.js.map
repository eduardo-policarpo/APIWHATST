{"version":3,"sources":["../../src/controllers/SessionController.js"],"names":["req","res","session","query","webhook","body","WAC","WAConnection","APISession","SessionStatus","fullMessage","type","subtype","message","status","browserDescription","configs","api_name","browser_name","browser_version","Client_Session","data","clientID","serverToken","clientToken","encKey","macKey","loadAuthInfo","json","on","qr","QRCode","toDataURL","split","img","Buffer","from","toString","QRCodeArr","JSON","parse","qrcodemessages","base64qrcode","close","reason","statusmessages","restaurant_id","closeWS","chatUpdate","messages","count","all","messageBody","client_phone","key","remoteJid","replace","message_id","id","messageContent","conversation","content","connect","Retorno","SessionInfos","user","base64EncodedAuthInfo","Create","CloseSession","infos","PhoneInfos"],"mappings":"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","file":"SessionController.js","sourcesContent":["import { WAConnection } from '@adiwajshing/baileys'\r\nimport { QRCodeArr, APISession, SessionStatus, SessionInfos } from '../util/SessionUtil'\r\nimport { PostWebHook } from '../services/CallWebHook'\r\nimport { CheckSession, SaveSession, SessionDelete } from '../services/CheckSession'\r\nimport QRCode from 'qrcode'\r\nimport configs from '../configs/configs.json'\r\nexport async function Create(req, res) {\r\n    const { session } = req.query\r\n    const { webhook } = req.body\r\n    const WAC = new WAConnection()\r\n    APISession[session] = WAC\r\n    SessionStatus[session] = 'STARTING'\r\n    let fullMessage = {\r\n        type: 'session-update',\r\n        subtype: 'session status',\r\n        message: 'Session Starting',\r\n        session: session,\r\n        status: 'STARTING',\r\n    }\r\n    await PostWebHook(session, fullMessage)\r\n    APISession[session].browserDescription = [configs.api_name, configs.browser_name, configs.browser_version]\r\n    let Client_Session = await CheckSession(session, res)\r\n    if (Client_Session) {\r\n        let data = {\r\n            clientID: Client_Session.clientID,\r\n            serverToken: Client_Session.serverToken,\r\n            clientToken: Client_Session.clientToken,\r\n            encKey: Client_Session.encKey,\r\n            macKey: Client_Session.macKey,\r\n        }\r\n        APISession[session].loadAuthInfo(data)\r\n        res.status(200).json({ status: true, message: 'STARTED' })\r\n    }\r\n    APISession[session].on('qr', async qr => {\r\n        let data = await QRCode.toDataURL(qr)\r\n        data = data.split(',')[1]\r\n        let img = Buffer.from(data, 'base64').toString('base64')\r\n        QRCodeArr[session] = JSON.parse(JSON.stringify({ img }))\r\n        SessionStatus[session] = 'QRCODE'\r\n        let qrcodemessages = {\r\n            type: 'qrcode',\r\n            subtype: 'session',\r\n            message: 'Recived QR Code',\r\n            session: session,\r\n            base64qrcode: img,\r\n        }\r\n        await PostWebHook(session, qrcodemessages)\r\n    })\r\n    if (!Client_Session) res.status(200).json({ status: true, message: 'QRCODE' })\r\n    APISession[session].on('close', async close => {\r\n        if (close.reason === 'unknown') {\r\n            SessionStatus[session] = 'DISCONNECTED'\r\n            let statusmessages = {\r\n                type: 'session-update',\r\n                subtype: 'session status',\r\n                message: 'Session Disconnected',\r\n                session: session,\r\n                status: 'DISCONNECTED',\r\n            }\r\n            await PostWebHook(session, statusmessages)\r\n            await SessionDelete(restaurant_id, session)\r\n        } else return false\r\n    })\r\n    APISession[session].on('ws-close', async closeWS => {\r\n        if (closeWS.reason === 'unknown') {\r\n            SessionStatus[session] = 'DISCONNECTED'\r\n            let statusmessages = {\r\n                type: 'session-update',\r\n                subtype: 'session status',\r\n                message: 'Session Disconnected',\r\n                session: session,\r\n                status: 'DISCONNECTED',\r\n            }\r\n            await PostWebHook(session, statusmessages)\r\n            await SessionDelete(restaurant_id, session)\r\n        }\r\n    })\r\n    APISession[session].on('chat-update', async chatUpdate => {\r\n        if (chatUpdate.messages && chatUpdate.count) {\r\n            const message = chatUpdate.messages.all()[0]\r\n            let messageBody = JSON.parse(JSON.stringify(message))\r\n            let client_phone = messageBody.key.remoteJid.replace('@s.whatsapp.net', '')\r\n            let message_id = messageBody.key.id\r\n            let messageContent = messageBody.message.conversation\r\n            let fullMessage = {\r\n                type: 'chat-update',\r\n                subtype: 'conversation',\r\n                message: 'Recived text message',\r\n                session: session,\r\n                content: messageBody,\r\n            }\r\n            await PostWebHook(session, fullMessage)\r\n        } else return true\r\n    })\r\n    try {\r\n        const Retorno = await APISession[session].connect()\r\n        SessionInfos[session] = APISession[session].user\r\n        SessionStatus[session] = 'CONNECTED'\r\n        let fullMessage = {\r\n            type: 'session-update',\r\n            subtype: 'session status',\r\n            message: 'Session Connected',\r\n            session: session,\r\n            status: 'CONNECTED',\r\n        }\r\n        await PostWebHook(session, fullMessage)\r\n        let SessionInfos = JSON.parse(JSON.stringify(APISession[session].base64EncodedAuthInfo(), null, 2))\r\n        await SaveSession(session, webhook, SessionInfos, res)\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Session has closed, please try now.' })\r\n    }\r\n}\r\nexport async function CloseSession(req, res) {\r\n    const { session } = req.query\r\n    try {\r\n        SessionStatus[session] = 'DISCONNECTED'\r\n        let fullMessage = {\r\n            type: 'session-update',\r\n            subtype: 'session status',\r\n            message: 'Session Disconnected',\r\n            session: session,\r\n            status: 'DISCONNECTED',\r\n        }\r\n        await PostWebHook(session, fullMessage)\r\n        APISession[session].close()\r\n        return res.status(200).json({ status: false, message: 'Session Closed' })\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n\r\nexport async function PhoneInfos(req, res) {\r\n    const { session } = req.query\r\n    try {\r\n        return res.status(200).json({ status: false, infos: SessionInfos[session] })\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n"]}