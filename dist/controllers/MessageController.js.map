{"version":3,"sources":["../../src/controllers/MessageController.js"],"names":["req","res","session","query","body","phone","message","isgroup","timefortyping","length","reply","prefix","APISession","isOnWhatsApp","Phone_Number","updatePresence","jid","Presence","composing","sendMessage","MessageType","text","status","json","result","SendText","base64file","buf","Buffer","from","document","mimetype","caption","console","log","SendFile","base64image","image","SendImage","base64audio","recording","audio","ptt","SendAudio","replyid","loadMessages","messages","messagescontent","values","filter","key","id","quoted","Quoted"],"mappings":"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","file":"MessageController.js","sourcesContent":["import sleep from 'await-sleep'\r\nimport { Presence, MessageType, MessageOptions } from '@adiwajshing/baileys'\r\nimport { APISession } from '../util/SessionUtil'\r\nexport async function SendText(req, res) {\r\n    const { session } = req.query\r\n    const { phone, message, isgroup } = req.body\r\n    let timefortyping = message.length * 50\r\n    let reply = null\r\n    let prefix = isgroup ? '@g.us' : '@c.us'\r\n    try {\r\n        const Phone_Number = await APISession[session].isOnWhatsApp(`${phone}${prefix}`)\r\n        await APISession[session].updatePresence(Phone_Number.jid, Presence.composing)\r\n        await sleep(timefortyping)\r\n        await APISession[session].sendMessage(`${Phone_Number.jid}`, message, MessageType.text)\r\n        return res.status(200).json({ status: true, result: true, message: 'Sended' })\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n\r\nexport async function SendFile(req, res) {\r\n    const { session } = req.query\r\n    const { phone, message, base64file, isgroup } = req.body\r\n    let prefix = isgroup ? '@g.us' : '@c.us'\r\n    try {\r\n        const buf = Buffer.from(base64file, 'base64')\r\n        const Phone_Number = await APISession[session].isOnWhatsApp(`${phone}${prefix}`)\r\n        await APISession[session].updatePresence(Phone_Number.jid, Presence.composing)\r\n        await sleep(1000)\r\n        await APISession[session].sendMessage(`${Phone_Number.jid}`, buf, MessageType.document, { mimetype: 'application/pdf', caption: message })\r\n        return res.status(200).json({ status: true, result: true, message: 'Sended' })\r\n    } catch (e) {\r\n        console.log(e)\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n\r\nexport async function SendImage(req, res) {\r\n    const { session } = req.query\r\n    const { phone, message, base64image, isgroup } = req.body\r\n    let prefix = isgroup ? '@g.us' : '@c.us'\r\n    try {\r\n        const buf = Buffer.from(base64image, 'base64')\r\n        const Phone_Number = await APISession[session].isOnWhatsApp(`${phone}${prefix}`)\r\n        await APISession[session].updatePresence(Phone_Number.jid, Presence.composing)\r\n        await sleep(1000)\r\n        await APISession[session].sendMessage(`${Phone_Number.jid}`, buf, MessageType.image, { mimetype: 'image/png', caption: message })\r\n        return res.status(200).json({ status: true, result: true, message: 'Sended' })\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n\r\nexport async function SendAudio(req, res) {\r\n    const { session } = req.query\r\n    const { phone, message, base64audio, isgroup } = req.body\r\n    let prefix = isgroup ? '@g.us' : '@c.us'\r\n    try {\r\n        const buf = Buffer.from(base64audio, 'base64')\r\n        const Phone_Number = await APISession[session].isOnWhatsApp(`${phone}${prefix}`)\r\n        await APISession[session].updatePresence(Phone_Number.jid, Presence.recording)\r\n        await sleep(1000)\r\n        await APISession[session].sendMessage(`${Phone_Number.jid}`, buf, MessageType.audio, { mimetype: 'audio/ogg; codecs=opus', ptt: true, caption: message })\r\n        return res.status(200).json({ status: true, result: true, message: 'Sended' })\r\n    } catch (e) {\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n\r\nexport async function Quoted(req, res) {\r\n    const { session } = req.query\r\n    const { phone, message, isgroup, replyid } = req.body\r\n    let prefix = isgroup ? '@g.us' : '@c.us'\r\n    let timefortyping = message.length * 50\r\n    try {\r\n        const Phone_Number = await APISession[session].isOnWhatsApp(`${phone}${prefix}`)\r\n        const messages = await APISession[session].loadMessages(Phone_Number.jid)\r\n        let messagescontent = messages.messages\r\n        await APISession[session].updatePresence(Phone_Number.jid, Presence.composing)\r\n        await sleep(timefortyping)\r\n        const values = messagescontent.filter(messagescontent => messagescontent.key.id === replyid)\r\n        await APISession[session].sendMessage(`${Phone_Number.jid}`, message, MessageType.text, { quoted: values[0] })\r\n        return res.status(200).json(values)\r\n    } catch (e) {\r\n        console.log(e)\r\n        return res.status(400).json({ status: false, message: 'Error' })\r\n    }\r\n}\r\n"]}